/**
 * This file define the message structure
 * used in the inter-server communication
 * followed by Google Protocol Buffers.
 */

syntax = "proto2";

package singaistorageipc;

message Head{
	optional uint32 userID_ = 1;
	optional string secretKey_ = 2;
	optional uint32 tranID_ = 3;
}

message AuthenticationRequest{
	optional Head head_ = 1;
	optional string username_ = 2;
	optional string password_ = 3;
}

message AuthenticationResponse{
	optional Head head_ = 1;
	optional string username_ = 2;
	enum AuthCode{
	INTERNAL_ERR = 0; // some system internal error
    	SUCCESS      = 1; // successful authentication
    	USER_ERR     = 2; // no such user found
    	PASSWD_ERR   = 3; // wrong user password
	}

	optional AuthCode authCode_ = 3;
}

message OpPermissionRequest{
	optional Head head_ = 1;
	optional string path_ = 2;
	enum OpType{
	READ = 0;
	WRITE = 1;
	DELETE = 2;
        CLOSE  = 3;
	}
	optional OpType opType_ = 3;
}

message MetaData{
	optional uint64 globalObjectID_  = 1;
	optional uint64 totalObjectSize_ = 2;
	optional uint32 numberOfShards_  = 3;
}

message OpPermissionResponse{
	optional Head head_ = 1;
	enum PermCode{
    	SUCCESS      = 0; // operation has been approved
    	USER_ERR     = 1; // user cannot perform operation
                   	  // on the data (ACL problem)
    	PATH_ERR     = 2; // no such path exists 
    	QUOTA_ERR    = 3; // user has exceeded data quota
	LOCK_ERR     = 4; // cannot lock the object, maybe 
			  // some one is using this object
	INTERNAL_ERR = 5; // some system internal error
	}
	optional PermCode permCode_ = 2;
	optional MetaData metaData_ = 3;
	
	message RadosObject{
	optional string cephObjectID_ = 1;
	optional uint32 index_ = 2;
	optional uint64 size_ = 3;
	}
	
	repeated radosObject RadosObjects_ = 4;
	optional uint64 canWrite_ = 5;
}

message IOResult{
	optional Head head_ = 1;
	enum Status{
      	SUCCESS      = 0; // successful IO op
      	PARTIAL_ERR  = 1; // operation partially completed
      	AUTH_ERR     = 2; // machine does not have auth to perform
                          // IO
        INTERNAL_ERR = 3; // some internal cluster error 
           	              // (undo the previous operation)
	}

	optional Status ioStat_ = 2;
	optional uint32 token_  = 3;
}
